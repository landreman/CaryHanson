#!/usr/bin/env python3

import unittest
import numpy as np
from scipy.interpolate import interp1d
from caryhanson.helicalcoil import HelicalCoil
from caryhanson.periodic_field_line import periodic_field_line

class PeriodicFieldLineTests(unittest.TestCase):

    def test_default_axis(self):
        """
        Verify that we find the magnetic axis for the default coil shape
        """
        # Reference values were computed for n = 49:
        R_hires = np.array([0.983432871627971, 0.983432637110481, 0.983431941763074,
                            0.983430809789212, 0.983429280179349, 0.983427404769668,
                            0.983425245683006, 0.98342287229987 , 0.983420357934741,
                            0.983417776410061, 0.983415198725945, 0.983412690017407,
                            0.983410306972659, 0.983408095856758, 0.983406091246171,
                            0.983404315533822, 0.983402779213896, 0.983401481904256,
                            0.98340041401531 , 0.983399558930964, 0.983398895533028,
                            0.983398400877746, 0.983398052823707, 0.983397832415222,
                            0.983397725844065, 0.983397725844065, 0.983397832415223,
                            0.983398052823707, 0.983398400877746, 0.983398895533027,
                            0.983399558930962, 0.983400414015308, 0.983401481904254,
                            0.983402779213895, 0.983404315533821, 0.98340609124617 ,
                            0.983408095856756, 0.983410306972658, 0.983412690017406,
                            0.983415198725943, 0.983417776410059, 0.98342035793474 ,
                            0.983422872299868, 0.983425245683005, 0.983427404769667,
                            0.983429280179349, 0.983430809789212, 0.983431941763074,
                            0.983432637110482])

        Z_hires = np.array([-1.927576710783598e-15,  1.549578479006169e-06,
                            3.107951790217735e-06,  4.681570705402376e-06,
                            6.272374388191400e-06,  7.875964783179601e-06,
                            9.480266858299624e-06,  1.106478775458612e-05,
                            1.260054942596720e-05,  1.405072542190359e-05,
                            1.537196563548557e-05,  1.651634593876635e-05,
                            1.743383561390542e-05,  1.807513727968615e-05,
                            1.839472429226737e-05,  1.835388162224446e-05,
                            1.792354961915406e-05,  1.708677673593750e-05,
                            1.584060718109755e-05,  1.419726163688332e-05,
                            1.218451175358510e-05,  9.845199408453483e-06,
                            7.235906361953032e-06,  4.424835199811507e-06,
                            1.489014427825223e-06, -1.489014435143462e-06,
                            -4.424835207073913e-06, -7.235906369142757e-06,
                            -9.845199415539471e-06, -1.218451176055259e-05,
                            -1.419726164371854e-05, -1.584060718778514e-05,
                            -1.708677674245766e-05, -1.792354962547727e-05,
                            -1.835388162835712e-05, -1.839472429815877e-05,
                            -1.807513728535725e-05, -1.743383561935318e-05,
                            -1.651634594399496e-05, -1.537196564048871e-05,
                            -1.405072542668870e-05, -1.260054943056144e-05,
                            -1.106478775899604e-05, -9.480266862549242e-06,
                            -7.875964787293520e-06, -6.272374392191317e-06,
                            -4.681570709322471e-06, -3.107951794082374e-06,
                            -1.549578482851101e-06])
        
        n_hires = len(R_hires)
        phi_hires = np.linspace(0, 2 * np.pi / 5, n_hires, endpoint=False)
        # Create a default helical coil
        hc = HelicalCoil()
        for nphi in [7, 18, 23]:
            R, phi, Z = periodic_field_line(hc, nphi)
            # Interpolate the reference result to the lower-resolution phi grid:
            R_ref = interp1d(phi_hires, R_hires, kind='cubic')(phi)
            Z_ref = interp1d(phi_hires, Z_hires, kind='cubic')(phi)
            print('For n={}, errors in R,Z are {}, {}'.format( \
                nphi, np.max(np.abs(R - R_ref)), np.max(np.abs(Z - Z_ref))))
            np.testing.assert_allclose(R, R_ref, atol=1.0e-8)
            np.testing.assert_allclose(Z, Z_ref, atol=1.0e-8)
        
if __name__ == "__main__":
    unittest.main()
