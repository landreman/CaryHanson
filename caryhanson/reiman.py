#!/usr/bin/env python3

"""
This module contains a class for the Reiman-Greensides model magnetic field.
"""

import numpy as np
from .field import Field

class ReimanField(Field):
    """
    This class represents a magnetic field generated by one or more
    helical coils.
    """
    def __init__(self, R0=1, B0=1, iotaj=[0.15, 0.38], eps=[0.01], ms=[6]):
        assert len(eps) == len(ms)
        self.R0 = R0
        self.B0 = B0
        self.iotaj = np.array(iotaj)
        self.eps = np.array(eps)
        self.ms = np.array(ms)
        self.nfp = 1

    def B_func(self, R_phi_Z, iotaj, eps):
        """
        This function computes B in a form that is convenient for automatic differentiation.
        The arguments iotaj and eps should be numpy arrays.
        """
        R = R_phi_Z[0]
        phi = R_phi_Z[1]
        Z = R_phi_Z[2]
        theta = np.arctan2(Z, R - self.R0)
        
        r = np.sqrt(Z * Z + (R - self.R0) * (R - self.R0))
        psi = 0.5 * self.B0 * r * r
        jarr = np.arange(len(self.iotaj)) + 1

        temp = self.ms * eps * (r ** (self.ms - 2))
        Q0 = np.sum(temp * np.cos(self.ms * theta - phi)) + self.B0 * np.sum(iotaj * jarr * (psi ** (jarr - 1)))
        Q1 = np.sum(temp * np.sin(self.ms * theta - phi))

        BR = (Z * Q0 + (R - self.R0) * Q1) / R
        Bphi = -self.B0
        BZ = (Z * Q1 - (R - self.R0) * Q0) / R
        return BR, Bphi, BZ
        
        
    def BR_Bphi_BZ(self, R, phi, Z):
        """
        Return the cylindrical components of the magnetic field at a specified point.
        This subroutine only works for single points as arguments.
        """

        return self.B_func([R, phi, Z], self.iotaj, self.eps)
