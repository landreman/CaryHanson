#!/usr/bin/env python3

"""
This script produces Poincare plots for the Reiman field model
using previously computed (R, Z) data. It should only be run serially.
"""

import numpy as np
import sys
sys.path.append('/Users/mattland/CaryHanson')
from caryhanson import poincare_load, ReimanField, periodic_field_line, tangent_map, circumference, island_width
import matplotlib.pyplot as plt
from matplotlib.ticker import AutoMinorLocator

#filename = 'Poincare_ReimanNegativeEps_rtol1e-06_atol1e-09_Npoints200_Nlines16.dat'
filename = 'Poincare_Reiman_rtol1e-06_atol1e-09_Npoints2000_Nlines16.dat'
data = poincare_load(filename)
Poincare_data = data.data
N_field_lines = data.nlines

# Display the Poincare plot
marker_size = 0.5
fig = plt.figure(figsize=(14,7))
j_quarter = 0
for j in range(N_field_lines):
    plt.scatter(Poincare_data[j][0,j_quarter:-1:4], Poincare_data[j][1,j_quarter:-1:4], s=marker_size, edgecolors='none')
plt.xlabel('R')
plt.ylabel('Z')
plt.gca().set_aspect('equal',adjustable='box')
# Turn on minor ticks, since it is necessary to get minor grid lines                                                             
plt.gca().xaxis.set_minor_locator(AutoMinorLocator(10))
plt.gca().yaxis.set_minor_locator(AutoMinorLocator(10))
plt.grid(which='major',linewidth=0.5)
plt.grid(which='minor',linewidth=0.15)

field = ReimanField()

# Find and plot the magnetic axis:
pfl = periodic_field_line(field, 31, periods=1, R0=1.0)
plt.plot(pfl.R_k, pfl.Z_k, '+b', label='Magnetic axis')

periods = 6

# Find X and O points
label_par = 'epar'
label_perp = 'eperp'
for xo in [0, 1]:
    if xo < 1:
        label = 'X points'
        R0 = 1.18
        Z0 = 0.11
        linespec = 'xr'
    else:
        label = 'O points'
        R0 = 1.2
        Z0 = 0
        linespec = '.k'

    pfl = periodic_field_line(field, 99, periods=periods, R0=R0, Z0=Z0)
    tm = tangent_map(field, pfl)

    pfl = circumference(pfl, 1.0, 0.0)
    print('Circumference: ', pfl.circumference)
    width, vects = island_width(pfl, tm)
    print('Width: ', width)
    
    # Plot the e|| and eperp vectors
    for j in range(periods):
        length = 0.015
        plt.plot([pfl.R_k[j], pfl.R_k[j] + length * tm.epars[j][0]],
                 [pfl.Z_k[j], pfl.Z_k[j] + length * tm.epars[j][1]], '-m', label=label_par)
        plt.plot([pfl.R_k[j], pfl.R_k[j] + length * tm.eperps[j][0]],
                 [pfl.Z_k[j], pfl.Z_k[j] + length * tm.eperps[j][1]], '-c', label=label_perp)
        label_par = None
        label_perp = None

    plt.plot(pfl.R_k, pfl.Z_k, linespec, label=label)

    if vects is not None:
        length = 0.002
        for j in range(len(vects)):
            j_mod = np.mod(j, periods)
            r0 = pfl.R_k[j_mod]
            z0 = pfl.Z_k[j_mod]
            plt.plot([r0, r0 + length * vects[j][0]],
                     [z0, z0 + length * vects[j][1]], '-k', lw=0.5)

    plt.legend(loc='upper right', fontsize=10)

plt.tight_layout()
plt.show()
